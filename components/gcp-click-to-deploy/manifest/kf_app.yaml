# run kubectl create -f kf_app.yaml will deploy kubeflow management app's frontend and backend to your GKE cluster.
# to access web UI, do "kubectl proxy" and open
#     "http://localhost:8001/api/v1/namespaces/default/services/kubeflow-controller:3000/proxy"
# Note: Do not use 127.0.0.1 to replace above localhost otherwise you cannot login with your account.

apiVersion: v1
data:
# Assume user access app via "kubectl port-forward ${pod-name} 3000:3000 8080:8080,
# otherwise change address below to your address pointing to controller-backend
  app-config.yaml: |
    appAddress: https://deploy.kubeflow.dev
    defaultApp:
      components:
      - name: jupyterhub
        prototype: jupyterhub
      - name: pipeline
        prototype: pipeline
      - name: argo
        prototype: argo
      - name: ambassador
        prototype: ambassador
      - name: centraldashboard
        prototype: centraldashboard
      - name: tf-job-operator
        prototype: tf-job-operator
      - name: cloud-endpoints
        prototype: cloud-endpoints
      - name: cert-manager
        prototype: cert-manager
      - name: iap-ingress
        prototype: iap-ingress
      parameters:
      - component: cloud-endpoints
        name: secretName
        value: admin-gcp-sa
      - component: cert-manager
        name: acmeEmail
        # TODO: use your email for ssl cert
        value: johnDoe@acme.com
      - component: iap-ingress
        name: ipName
        # TODO: make sure value of ipName is the same as property <ipName>.
        value: ipName
      - component: iap-ingress
        name: hostname
        # TODO: replace with Name of GCP project. This is fully qualified domain name to use with ingress.
        value: kubeflow.endpoints.<Project>.cloud.goog
      - component: jupyterhub
        name: jupyterHubAuthenticator
        value: iap
      - component: jupyterhub
        name: cloud
        value: gke
      - component: ambassador
        name: cloud
        value: gke
      registries:
      - name: kubeflow
        repo: https://github.com/kubeflow/kubeflow
        # default leave empty
        version:
        path: kubeflow
kind: ConfigMap
metadata:
  name: kubeflow-controller
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: kubeflow-controller
  namespace: default
spec:
  ports:
  - name: web-app
    port: 3000
  - name: backend
    port: 8080
  selector:
    app: kubeflow-controller
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kubeflow-controller
  name: kubeflow-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeflow-controller
  template:
    metadata:
      labels:
        app: kubeflow-controller
      namespace: default
    spec:
      containers:
      - name: web-app
        image: gcr.io/kubeflow-images-public/test-app:0914
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: config-volume
          mountPath: /app/src/user_config
      - name: controller-backend
        image: gcr.io/kubeflow-images-public/bootstrapper:v20180913-0ec42ca3-dirty-b41bd1 
        workingDir: /opt/bootstrap
        command: [ "/opt/kubeflow/bootstrapper"]
        args: [
          "--in-cluster",
          "--namespace=kubeflow"
          ]
        ports:
        - containerPort: 8080
      volumes:
      - name: config-volume
        configMap:
          name: kubeflow-controller
